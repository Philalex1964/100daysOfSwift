{\rtf1\ansi\ansicpg1251\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red212\green212\blue212;\red0\green0\blue0;
\red235\green0\blue121;\red24\green24\blue28;\red246\green246\blue239;\red215\green165\blue255;\red72\green212\blue251;
\red93\green108\blue125;\red157\green101\blue255;\red248\green60\blue79;\red222\green43\blue91;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c86275\c86275\c86275;\cssrgb\c0\c0\c0;
\cssrgb\c94902\c14118\c54902;\cssrgb\c12549\c12549\c14510;\cssrgb\c97255\c97255\c94902;\cssrgb\c87843\c72157\c100000;\cssrgb\c32941\c86275\c98824;
\cssrgb\c43922\c50196\c56471;\cssrgb\c68235\c50588\c100000;\cssrgb\c98824\c33725\c38039;\cssrgb\c90588\c27059\c43137;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid601\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc\partightenfactor0

\f0\b\fs98 \cf2 \expnd0\expndtw0\kerning0
DAY 36\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf3 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf4 Project 8, part one\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf4 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf4 Linus Torvalds, the creator of the massively popular Linux operating system, once said \'93talk is cheap; show me the code.\'94 What he was 
\f2\i trying
\f1\i0  to say in his inimitable way is that seeing code that solves a problem well is often the most important thing in our industry \'96\'a0it\'92s important to talk about problems and to explore them thoroughly on a conceptual level, but ultimately writing code that solves the problem is what makes products ship.\
I use storyboards for most projects I teach \'96 they are easier for beginners to learn, they give us the ability to see how a design looks as we\'92re building it, and they can even show you previews across multiple devices and orientations at the same time.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 However, in this project we\'92re going to build the user interface entirely in code.
\f1\b0  There will still be a storyboard, but we\'92re not going to touch it \'96\'a0we\'92ll create our labels, buttons, and Auto Layout constraints entirely in Swift.\
This is our \'93show me the code\'94 moment: we\'92re going to look at exactly how to build complex iOS layouts programmatically so that everything is entirely under your control. It\'92s not 
\f2\i hard
\f1\i0  to do, but it does take a lot of time \'96\'a0we need to create, configure, and place every view by hand. However, I think you\'92ll learn a lot from the experience, because after today I think you\'92ll know for sure whether you prefer using storyboards or creating UI in code!\

\f0\b Today you have two topics to work through, and you\'92ll learn about text alignment, layout margins, 
\f3 UIFont
\f0 , and more.
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/8/1/setting-up"}}{\fldrslt \expnd0\expndtw0\kerning0
Setting up}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/8/2/building-a-uikit-user-interface-programmatically"}}{\fldrslt \expnd0\expndtw0\kerning0
Building a UIKit user interface programmatically}}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf4 Once you\'92re done, there\'92s something I\'92d like you to keep in mind: whether you prefer making user interfaces in storyboards or programmatically, it\'92s important you know how to do both. It\'92s one thing having your preference, but when you join a company you need to be able to solve problems as a team.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf4 Building a UIKit user interface programmatically
\f1\b0\fs35\fsmilli17600 \
\
Our user interface for this game is going to be fairly complicated, but we can assemble it piece by piece and have Auto Layout do most of the work for us.\
The main part of the UI will be two large labels: one containing the clues the user needs to figure out, and one showing how many letters are in the word for each clue. So, it might say \'93A cow in a tornado\'94 in one label and \'939 Letters\'94 in the other \'96 with the answer being \'93milkshake\'94. As the player solves each clue, the letter count will be replaced with that answer, so they can see at a glance which ones they have solved.\
Just above and to the right of those two labels will be one extra label, nice and small, which will show the user\'92s score.\
In the middle of the screen will be a 
\f3\b UITextField
\f1\b0  where we\'92ll store the user\'92s current answer, plus buttons below to submit the answer or clear it.\
Finally, at the bottom we\'92re going to make 20 (yes, twenty!) buttons, each containing different parts of the clues. So, there will be one with MIL, one with KSH, and one with AKE \'96 the user needs to tap all three to spell MILKSHAKE. To make our layout a little easier, we\'92re going to place those buttons inside another 
\f3\b UIView
\f1\b0  that we can position centered on the screen.\
The picture below shows how your finished layout should look if you've followed all the instructions. If you're seeing something slightly different, that's OK. If you're seeing something 
\f2\i very
\f1\i0  different, you should probably try again!\cf3 \
\
\pard\pardeftab720\partightenfactor0
\cf4 Our game is designed for iPads because we\'92ve got a lot of information we want to cram in. Later on, you\'92re welcome to try creating a second layout specifically for iPhone, and it 
\f2\i is
\f1\i0  possible \'96\'a0it just takes a lot more thinking!\
\
The first thing we\'92re going to do is create five properties to store the important parts of our user interface: the clues label, the answers label, the player\'92s current answer (the word they are spelling), their score, and all the buttons showing word pieces.\
So, open ViewController.swift and add these five properties to the 
\f3\b ViewController
\f1\b0  class:\cf3 \
\pard\pardeftab720\partightenfactor0

\f3\b\fs36 \cf5 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  cluesLabel: \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILabel\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 !\

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  answersLabel: \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILabel\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 !\

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  currentAnswer: \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITextField\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 !\

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  scoreLabel: \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILabel\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 !\

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  letterButtons = [\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIButton\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ]()
\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 \
\
Just like in projects 4 and 7, we\'92re going to write a custom 
\f3\b loadView()
\f1\b0  method that creates our user interface in code. This will involve much more work than just creating a 
\f3\b WKWebView
\f1\b0 , though \'96 we have lots of UI to create! So, we\'92ll tackle it piece by piece so you can see it coming together as we go.\
Let\'92s start nice and easy: we\'92re going to create the main view itself as a big and white empty space. This is just a matter of creating a new instance of 
\f3\b UIView
\f1\b0 , giving it a white background color, and assigning that to our view controller\'92s 
\f3\b view
\f1\b0  property:\

\f3\b\fs36 \cf5 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 override
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 func
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 loadView\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 () \{\
    view = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIView\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
    view.backgroundColor = .white\
\
    \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // more code to come!\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 \
\pard\pardeftab720\partightenfactor0

\f3\b \cf4 UIView
\f1\b0  is the parent class of all of UIKit\'92s view types: labels, buttons, progress views, and more. Previously we assigned a 
\f3\b WKWebView
\f1\b0  instance directly as our view, meaning that it automatically took up all the space. Here, though, we\'92re going to be adding lots of child views and positioning them by hand, so we need a big, empty canvas to work with.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf4 Placing three labels at the top\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf4 Next, let\'92s create and add the score label. This uses similar code to what you learned in project 6, although now we\'92re going to set the label\'92s 
\f3\b textAlignment
\f1\b0  property so the text is right-aligned.\
Add this below the previous code, in place of the 
\f3\b // more code to come!
\f1\b0  comment:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 scoreLabel = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILabel\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
scoreLabel.translatesAutoresizingMaskIntoConstraints = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
scoreLabel.textAlignment = .
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 right
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
scoreLabel.text = \cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Score: 0"\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
view.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (scoreLabel)\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 We need to add some Auto Layout constraints to make that label be positioned neatly on the screen, and we\'92re going to be using 
\f2\i anchors
\f1\i0  just like we did in project 6. These let us very clearly and descriptively place views relative to each other, however this time I want to show you one important difference: because we\'92ll be creating lots of constraints at the same time, we\'92ll be activating them all at once rather than setting 
\f3\b isActive = true
\f1\b0  multiple times.\
\
We need to add some Auto Layout constraints to make that label be positioned neatly on the screen, and we\'92re going to be using 
\f2\i anchors
\f1\i0  just like we did in project 6. These let us very clearly and descriptively place views relative to each other, however this time I want to show you one important difference: because we\'92ll be creating lots of constraints at the same time, we\'92ll be activating them all at once rather than setting 
\f3\b isActive = true
\f1\b0  multiple times.\
This is done using the 
\f3\b NSLayoutConstraint.activate()
\f1\b0  method, which accepts an array of constraints. It will put them all together at once, so we\'92ll be adding more constraints to this call over time.\
UIKit gives us several guides that we can anchor our views to. One of the most common is the 
\f3\b safeAreaLayoutGuide
\f1\b0  of our main view, which is the space available once you subtract any rounded corners or notches. Inside that is the 
\f3\b layoutMarginsGuide
\f1\b0 , which adds some extra margin so that views don\'92t run to the left and right edges of the screen.\
In this app we\'92re going to be using the 
\f3\b layoutMarginsGuide
\f1\b0  so that our views are indented a little on each edge, but we\'92ll also be adding some extra indenting to make the whole thing look better on-screen.\
So, add this below the previous code:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf8 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 NSLayoutConstraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 activate\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ([\
    scoreLabel.topAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.layoutMarginsGuide.topAnchor),\
    scoreLabel.trailingAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.layoutMarginsGuide.trailingAnchor),\
\
    \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // more constraints to be added here!\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
])\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 Notice the way I\'92m pinning the label to 
\f3\b view.layoutMarginsGuide
\f1\b0  \'96 that will make the score label have a little distance from the right edge of the screen.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 Tip:
\f1\b0  Remember that you\'92re setting anchors as an array, so make sure you include a comma after each one.\
\
\pard\pardeftab720\partightenfactor0
\cf4 We\'92ll be adding lots more view code 
\f2\i before
\f1\i0  the call to 
\f3\b NSLayoutConstraint.activate()
\f1\b0 , and lots more constraints code 
\f2\i inside
\f1\i0  that array being passed to 
\f3\b NSLayoutConstraint.activate()
\f1\b0 .\
If you run the app now you should see \'93Score: 0\'94 nestled in the top-right corner. If you 
\f2\i don\'92t
\f1\i0  see that, please check your code otherwise the rest of this project will be very confusing indeed!\cf4 \
\
\cf4 Next we\'92re going to add the clues and answers labels. This will involve similar code to the score label, except we\'92re going to set two extra properties: 
\f3\b font
\f1\b0  and 
\f3\b numberOfLines
\f1\b0 . The 
\f3\b font
\f1\b0  property describes what kind of text font is used to render the label, and is provided as a dedicated type that describes a font face and size: 
\f3\b UIFont
\f1\b0 . 
\f3\b numberOfLines
\f1\b0  is an integer that sets how many lines the text can wrap over, but we\'92re going to set it to 0 \'96\'a0a magic value that means \'93as many lines as it takes.\'94\
Add this code below the code to create the label, but 
\f2\i before
\f1\i0  the Auto Layout code:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 cluesLabel = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILabel\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
cluesLabel.translatesAutoresizingMaskIntoConstraints = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
cluesLabel.font = \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 systemFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (ofSize: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 24\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
cluesLabel.text = \cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "CLUES"\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
cluesLabel.numberOfLines = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
view.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (cluesLabel)\
\
answersLabel = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILabel\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
answersLabel.translatesAutoresizingMaskIntoConstraints = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
answersLabel.font = \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 systemFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (ofSize: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 24\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
answersLabel.text = \cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "ANSWERS"\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
answersLabel.numberOfLines = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
answersLabel.textAlignment = .
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 right
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
view.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (answersLabel)\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 Using 
\f3\b UIFont.systemFont(ofSize: 24)
\f1\b0  will give us a 24-point font in whatever font is currently being used by iOS. This was Helvetica in the early days of iOS, then moved to Helvetica Neue and finally San Francisco. Asking for the system font means we\'92ll get whatever is the standard today, but our UI will update automatically if Apple makes more changes in the future.\
\
To position those in such a way that they look great on a variety of iPad sizes \'96 from iPad Mini up to the 12.9-inch iPad Pro \'96 we\'92re going to set some anchors:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The tops of the clues and answers labels will be pinned to the bottom of the score label.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The clues label will be pinned to the leading edge of the screen, indented by 100 points so that it looks neater.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The clues label will have a width anchor set to 0.6 of the width of the main view, so that it takes up 60% of the screen. We need to subtract 100 from this to account for the indent.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The answers label will be pinned to the 
\f2\i trailing
\f1\i0  edge of the screen, then also indented by 100 points to match the clues label.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The answers label will have a width anchor of 0.4 of the width of the main view, so that it takes up the remaining 40% of the screen. Again, that needs to have 100 taken away to account for the indent.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Finally, we\'92re going to make the height of the answers label match the height of the clues label.\
\pard\pardeftab720\partightenfactor0
\cf4 I realize that might sound like a lot of work, but this kind of thing is where Auto Layout anchors really shine. Just remember: it takes the multiplier into account first, then the constant.\
Add these constraints to the array we\'92re activating \'96\'a0I\'92ve added comments just to be sure:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // pin the top of the clues label to the bottom of the score label\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
cluesLabel.topAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: scoreLabel.bottomAnchor),\
\
\cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // pin the leading edge of the clues label to the leading edge of our layout margins, adding 100 for some space\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
cluesLabel.leadingAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.layoutMarginsGuide.leadingAnchor, constant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
\
\cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // make the clues label 60% of the width of our layout margins, minus 100\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
cluesLabel.widthAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.layoutMarginsGuide.widthAnchor, multiplier: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0.6\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , constant: -\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
\
\cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // also pin the top of the answers label to the bottom of the score label\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
answersLabel.topAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: scoreLabel.bottomAnchor),\
\
\cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // make the answers label stick to the trailing edge of our layout margins, minus 100\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
answersLabel.trailingAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.layoutMarginsGuide.trailingAnchor, constant: -\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
\
\cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // make the answers label take up 40% of the available space, minus 100\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
answersLabel.widthAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.layoutMarginsGuide.widthAnchor, multiplier: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0.4\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , constant: -\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
\
\cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // make the answers label match the height of the clues label\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
answersLabel.heightAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: cluesLabel.heightAnchor),\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 If you run the code now you\'92ll see \'93CLUES\'94 and \'93ANSWERS\'94 near the top of the screen.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf4 Entering answers\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf4 Next we\'92re going to add a 
\f3\b UITextField
\f1\b0  that will show the user\'92s answer as they are building it. You might think this is a good place to use another 
\f3\b UILabel
\f1\b0  particularly because we want players to build words by tapping letter buttons rather than typing into a box. However, this lets me introduce you to the 
\f3\b placeholder
\f1\b0  property of text fields, which draws gray prompt text that the user can type over \'96\'a0it looks really nice, and gives us space to provide some instructions to users.\
As with our labels we\'92re also going to adjust the font and alignment of the text field, but we\'92re also going to disable user interaction so the user can\'92t tap on it \'96\'a0we don\'92t want the iOS keyboard to appear.\
Add this code alongside the other views:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 currentAnswer = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITextField\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
currentAnswer.translatesAutoresizingMaskIntoConstraints = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
currentAnswer.placeholder = \cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Tap letters to guess"\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
currentAnswer.textAlignment = .center\
currentAnswer.font = \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 systemFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (ofSize: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 44\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
currentAnswer.isUserInteractionEnabled = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
view.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (currentAnswer)\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 The only new part is setting 
\f3\b isUserInteractionEnabled
\f1\b0  to false, which is what stops the user from activating the text field and typing into it.\
\
As for constraints, we\'92re going to make this text field centered in our view, but only 50% its width \'96 given how many characters it will hold, this is more than enough. We\'92re also going to place it below the clues label, with 20 points of spacing so the two don\'92t touch.\
Add this to your constraints array:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 currentAnswer.centerXAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.centerXAnchor),\
currentAnswer.widthAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.widthAnchor, multiplier: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0.5\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
currentAnswer.topAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: cluesLabel.bottomAnchor, constant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 20\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 Run the app again, and you\'92ll see \'93Tap letters to guess\'94 in gray underneath the red and blue labels \'96\'a0this is coming together slowly!\cf4 \
\
\cf4 Below the text field we\'92re going to add two buttons: one for the user to submit their answer (when they\'92ve entered all the letters they want), and one to clear their answer so they can try something else.\
To create a 
\f3\b UIButton
\f1\b0  in code you need to know two things:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Buttons have various built-in styles, but the ones you\'92ll most commonly use are 
\f3\b .custom
\f1\b0  and 
\f3\b .system
\f1\b0 . We want the default button style here, so we\'92ll use 
\f3\b .system
\f1\b0 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
We need to use 
\f3\b setTitle()
\f1\b0  to adjust the title on the button, just like we did with 
\f3\b setImage()
\f1\b0  in project 2.\
\pard\pardeftab720\partightenfactor0
\cf4 Add this to our view creation code:\
\pard\pardeftab720\partightenfactor0

\f3\b\fs36 \cf5 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  submit = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIButton\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (type: .system)\
submit.translatesAutoresizingMaskIntoConstraints = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
submit.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 setTitle\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "SUBMIT"\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , 
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : .normal)\
view.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (submit)\
\

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  clear = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIButton\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (type: .system)\
clear.translatesAutoresizingMaskIntoConstraints = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
clear.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 setTitle\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "CLEAR"\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , 
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : .normal)\
view.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (clear)\
\pard\pardeftab720\partightenfactor0

\f0\b\fs35\fsmilli17600 \cf4 \cb1 \shad0 Note:
\f1\b0  We don\'92t need to store those as properties on the view controller, because we don\'92t need to adjust them later.\
In terms of the constraints to add for those buttons, they need three each:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
One to set their vertical position. For the submit button we\'92ll be using the bottom of the current answer text field, but for the clear button we\'92ll be setting its Y anchor so that its stays aligned with the Y position of the submit button. This means both buttons will remain aligned even if we move one.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
We\'92re going to center them both horizontally in our main view. To stop them overlapping, we\'92ll subtract 100 from the submit button\'92s X position, and add 100 to the clear button\'92s X position. \'93100\'94 isn\'92t any sort of special number \'96\'a0you can experiment with different values and see what looks good to you.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
We\'92re going to force both buttons to have a height of 44 points. iOS likes to make its buttons really small by default, but at the same time Apple\'92s human interface guidelines recommends buttons be at least 44x44 so they can be tapped easily.\
\pard\pardeftab720\partightenfactor0
\cf4 Here are the constraints required to bring those rules to life \'96\'a0please add this to your constraints list:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 submit.topAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: currentAnswer.bottomAnchor),\
submit.centerXAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.centerXAnchor, constant: -\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
submit.heightAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalToConstant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 44\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
\
clear.centerXAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.centerXAnchor, constant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
clear.centerYAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: submit.centerYAnchor),\
clear.heightAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalToConstant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 44\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf4 Buttons\'85 buttons everywhere!\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf4 Are you feeling tired yet? It\'92s hard work, isn\'92t it? Don\'92t get me wrong \'96\'a0building user interface programmatically has many advantages, but it is certainly 
\f2\i verbose
\f1\i0 .\
Fortunately we\'92re near the end now, and all that remains is to add letter buttons at the bottom of the user interface. We need a lot of these \'96 20, to be precise \'96\'a0and we need to make sure they are positioned neatly on the screen.\
With complicated layouts like this one the smart thing to do is wrap things in a container view. In our case this means we\'92re going to create one container view that will house all the buttons, then give 
\f2\i that
\f1\i0  view constraints so that it\'92s positioned correctly on the screen.\
This is just going to be a plain 
\f3\b UIView
\f1\b0  \'96\'a0it does nothing special other than host our buttons. So, add this code below our previous view creation code:\cf3 \
\pard\pardeftab720\partightenfactor0

\f3\b\fs36 \cf5 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  buttonsView = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIView\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
buttonsView.translatesAutoresizingMaskIntoConstraints = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
view.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (buttonsView)\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 As this thing is the last view in our view (excluding the buttons inside it, but they don\'92t play a part in our Auto Layout constraints), we need to give it more constraints so that Auto Layout knows our hierarchy is complete:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
We\'92re going to give it a width and height of 750x320 so that it precisely contains the buttons inside it.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
It will be centered horizontally.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
We\'92ll set its top anchor to be the bottom of the submit button, plus 20 points to add a little spacing.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
We\'92ll pin it to the bottom of our layout margins, -20 so that it doesn\'92t run quite to the edge.\
\pard\pardeftab720\partightenfactor0
\cf4 Add these final constraints to our constraints array:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 buttonsView.widthAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalToConstant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 750\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
buttonsView.heightAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalToConstant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 320\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
buttonsView.centerXAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.centerXAnchor),\
buttonsView.topAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: submit.bottomAnchor, constant: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 20\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ),\
buttonsView.bottomAnchor.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraint\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (equalTo: view.layoutMarginsGuide.bottomAnchor, constant: -\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 20\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 Just for testing purposes, give that new view a green background color:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 buttonsView.backgroundColor = .green\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 We haven\'92t added the buttons inside that view just yet, but please run the app now \'96\'a0I think you\'92ll find the result interesting.\cf4 \
\
\cf4 Before we added the final buttons view, Auto Layout had no special idea of how big any of the views should be, so it used something called the 
\f2\i intrinsic content size
\f1\i0  \'96\'a0how big each view needs to be to show its content. This resulted in our views being neatly arranged at the top. But now we have a complete vertical stack, pinned at the top and bottom, so UIKit needs to fill the space in between by stretching one or more of the views.\
Every view in all our UIKit layouts has two important properties that tell UIKit how it can squash or stretch them in order to satisfy constraints:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f0\b \cf4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Content hugging priority
\f1\b0  determines how likely this view is to be made larger than its intrinsic content size. If this priority is high it means Auto Layout prefers not to stretch it; if it\'92s low, it will be more likely to be stretched.\
\ls6\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Content compression resistance priority
\f1\b0  determines how happy we are for this view to be made smaller than its intrinsic content size.\
\pard\pardeftab720\partightenfactor0
\cf4 Both of those values have a default: 250 for content hugging, and 750 for content compression resistance. Remember, higher priorities mean Auto Layout works harder to satisfy them, so you can see that views are usually fairly happy to be stretched, but prefer not to be squashed. Because all views have the same priorities for these two values, Auto Layout is forced to pick one to stretch \'96\'a0the score at the top.\
Now, all this matters because we\'92re going to adjust the content hugging priority for our clues and answers labels. More specifically, we\'92re going to give them a priority of 1, so that when Auto Layout has to decide which view to stretch they are first in line.\
Add these two lines of code after the code that creates 
\f3\b cluesLabel
\f1\b0  and 
\f3\b answersLabel
\f1\b0 :\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 cluesLabel.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 setContentHuggingPriority\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILayoutPriority\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 1\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ), 
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : .vertical)\
answersLabel.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 setContentHuggingPriority\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UILayoutPriority\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 1\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ), 
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : .vertical)\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 Run the app 
\f2\i now
\f1\i0  and you\'92ll see a big difference: the two labels now take up much more space, and the rest of our user interface looks more normal.\cf4 \
\
\cf4 Now that our user interface looks as it should, let\'92s create the final piece of our layout: the letter buttons that sit inside 
\f3\b buttonsView
\f1\b0 .\
We have 20 buttons to create across four rows and five columns, which is the perfect time to use some nested loops: create and configure each button, then position it inside the buttons view.\
However, we\'92re going to rely on a lovely feature of Auto Layout to make this whole process much easier: we\'92re 
\f2\i not
\f1\i0  going to set 
\f3\b translatesAutoresizingMaskIntoConstraints
\f1\b0  to false for these buttons, which means we can give them a specific position and size and have UIKit figure out the constraints for us.\
So, this actual button creation isn\'92t as hard as you might think:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Set constants to represent the width and height of our buttons for easier reference.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Loop through rows 0, 1, 2, and 3.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Loop through columns 0, 1, 2, 3, and 4.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Create a new button with a nice and large font \'96\'a0we can adjust the font of a button\'92s label using its 
\f3\b titleLabel
\f1\b0  property.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Calculate the X position of the button as being our column number multiplied by the button width.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Calculate the Y position of the button as being our row number multiplied by the button height.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
Add the button to our 
\f3\b buttonsView
\f1\b0  rather than the main view.\
\pard\pardeftab720\partightenfactor0
\cf4 As a bonus, we\'92re going to add each button to our 
\f3\b letterButtons
\f1\b0  array as we create them, so that we can control them later in the game.\
Calculating positions of views by hand isn\'92t something we\'92ve done before, because we\'92ve been relying on Auto Layout for everything. However, it\'92s no harder than sketching something out on graph paper: we create a rectangular frame that has X and Y coordinates plus width and height, then assign that to the 
\f3\b frame
\f1\b0  property of our view. These rectangles have a special type called 
\f3\b CGRect
\f1\b0 , because they come from Core Graphics.\
As an example, we\'92ll be calculating the X position for a button by multiplying our fixed button width (150) by its column position. So, for column 0 that will give an X coordinate of 150x0, which is 0, and for column 1 that will give an X coordinate of 150x1, which is 150 \'96\'a0they will line up neatly.\
Add this code after the call to 
\f3\b NSLayoutConstraint.activate()
\f1\b0 :\cf3 \
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // set some values for the width and height of each button\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\pard\pardeftab720\partightenfactor0

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  width = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 150\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  height = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 80\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\
\pard\pardeftab720\partightenfactor0
\cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // create 20 buttons as a 4x5 grid\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\pard\pardeftab720\partightenfactor0

\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  row 
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 in
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ..<\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 4\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
    
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  col 
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 in
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ..<\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 5\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
        \cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // create a new button and give it a big font size\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
        
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  letterButton = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIButton\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (type: .system)\
        letterButton.titleLabel?.font = \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 systemFont\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (ofSize: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 36\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
\
        \cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // give the button some temporary text so we can see it on-screen\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
        letterButton.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 setTitle\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "WWW"\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , 
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : .normal)\
\
        \cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // calculate the frame of this button using its column and row\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
        
\f3\b \cf5 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  frame = \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 CGRect\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (x: col * width, y: row * height, width: width, height: height)\
        letterButton.frame = frame\
\
        \cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // add it to the buttons view\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
        buttonsView.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addSubview\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (letterButton)\
\
        \cf10 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // and also to our letterButtons array\cf7 \cb6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
        letterButtons.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 append\cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (letterButton)\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf4 \cb1 \shad0 That\'92s the last of our code complete, so please remove the temporary background colors we gave to 
\f3\b cluesLabel
\f1\b0 , 
\f3\b answersLabel
\f1\b0 , and 
\f3\b buttonsView
\f1\b0 , then run your code to see how it all looks.\cf4 \
}
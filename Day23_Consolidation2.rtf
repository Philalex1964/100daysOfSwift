{\rtf1\ansi\ansicpg1251\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red212\green212\blue212;\red235\green0\blue121;\red24\green24\blue28;\red246\green246\blue239;\red72\green212\blue251;
\red157\green101\blue255;\red215\green165\blue255;\red248\green60\blue79;\red222\green43\blue91;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\cssrgb\c86275\c86275\c86275;\cssrgb\c94902\c14118\c54902;\cssrgb\c12549\c12549\c14510;\cssrgb\c97255\c97255\c94902;\cssrgb\c32941\c86275\c98824;
\cssrgb\c68235\c50588\c100000;\cssrgb\c87843\c72157\c100000;\cssrgb\c98824\c33725\c38039;\cssrgb\c90588\c27059\c43137;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs51 \cf2 \expnd0\expndtw0\kerning0
Day 23: Consolidation II\
\pard\pardeftab720\partightenfactor0

\f1\b\fs70 \cf2 Milestone: Projects 1-3
\f0\b0\fs51 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf2 It\'92s time for another consolidation day, because we\'92ve covered a lot of ground in the first three topics and it\'92s important you review them if you want them to stick in your head.\
However, this will also be the first day you\'92re asked to create a complete app from scratch. Don\'92t worry: I outline all the components required to make it work, and also provide hints to give you a head start.\
As you\'92ll see, creating an app from scratch is a very different experience to adding modifications to an existing app: you get blank page paralysis, which is where your brain knows where you want to get to but you\'92re just not sure how to start.\
A common reason to get stuck is that folks try to write flawless code first time. As Margaret Atwood once said, \'93if I waited for perfection, I would never write a word.\'94 So, dive in and see where you get \'96\'a0these milestone challenges will help you learn to get comfortable starting fresh projects, and to get real functionality up and running quickly.\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Today you have three topics to work through, one of which of is your challenge.
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/guide/2/1/what-you-learned"}}{\fldrslt \expnd0\expndtw0\kerning0
What you learned}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/guide/2/2/key-points"}}{\fldrslt \expnd0\expndtw0\kerning0
Key points}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/guide/2/3/challenge"}}{\fldrslt \expnd0\expndtw0\kerning0
Challenge}}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs51 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf2 You\'92ve made your first two projects now, and completed a technique project too \'96 this same cadence of app, game, technique is used all the way up to project 30, and you\'92ll start to settle into it as time goes by.\
Both the app and the game were built with UIKit \'96 something we\'92ll continue for two more milestones \'96 so that you can really start to understand how the basics of view controllers work. These really are a fundamental part of any iOS app, so the more experience I can give you with them the better.\
At this point you\'92re starting to put your Swift knowledge into practice with real context: actual, hands-on projects. Because most iOS apps are visual, that means you\'92ve started to use lots of things from UIKit, not least:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Table views using 
\f2\b UITableView
\f0\b0 . These are used everywhere in iOS, and are one of the most important components on the entire platform.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Image views using 
\f2\b UIImageView
\f0\b0 , as well as the data inside them, 
\f2\b UIImage
\f0\b0 . Remember: a 
\f2\b UIImage
\f0\b0  contains the pixels, but a 
\f2\b UIImageView
\f0\b0  displays them \'96 i.e., positions and sizes them. You also saw how iOS handles retina and retina HD screens using @2x and @3x filenames.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Buttons using 
\f2\b UIButton
\f0\b0 . These don\'92t have any special design in iOS by default \'96 they just look like labels, really. But they do respond when tapped, so you can take some action.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
View controllers using 
\f2\b UIViewController
\f0\b0 . These give you all the fundamental display technology required to show one screen, including things like rotation and multi-tasking on iPad.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
System alerts using 
\f2\b UIAlertController
\f0\b0 . We used this to show a score in project 2, but it\'92s helpful for any time you need the user to confirm something or make a choice.\
\ls2\ilvl0\kerning1\expnd0\expndtw0        
\f3\fs30 \cf3 \cb4 UIAlertController.Style = .alert .actionSheet
\f0\fs35\fsmilli17600 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Navigation bar buttons using 
\f2\b UIBarButtonItem
\f0\b0 . We used the built-in action icon, but there are lots of others to choose from, and you can use your own custom text if you prefer.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Colors using 
\f2\b UIColor
\f0\b0 , which we used to outline the flags with a black border. There are lots of built-in system colors to choose from, but you can also create your own.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Sharing content to Facebook and Twitter using 
\f2\b UIActivityViewController
\f0\b0 . This same class also handles printing, saving images to the photo library, and more.\
\pard\pardeftab720\partightenfactor0
\cf2 One thing that might be confusing for you is the relationship between 
\f2\b CALayer
\f0\b0  and 
\f2\b UIView
\f0\b0 , and 
\f2\b CGColor
\f0\b0  and 
\f2\b UIColor
\f0\b0 . I\'92ve tried to describe them as being \'93lower level\'94 and \'93higher level\'94, which may or may not help. Put simply, you\'92ve seen how you can create apps by building on top of Apple\'92s APIs, and that\'92s exactly how Apple works too: their most advanced things like 
\f2\b UIView
\f0\b0  are built on top of lower-level things like 
\f2\b CALayer
\f0\b0 . Some times you need to reach down to these lower-level concept, but most of the time you\'92ll stay in UIKit.\
If you\'92re concerned that you won\'92t know when to use UIKit or when to use one of the lower-level alternatives, don\'92t worry: if you try to use a 
\f2\b UIColor
\f0\b0  when Xcode expects a 
\f2\b CGColor
\f0\b0 , it will tell you!\
Both projects 1 and 2 worked extensively in Interface Builder, which is a running theme in this series: although you 
\f4\i can
\f0\i0  do things in code, it\'92s generally preferable not to. Not only does this mean you can see exactly how your layout will look when previewed across various device types, but you also open the opportunity for specialized designers to come in and adjust your layouts without touching your code. Trust me on this: keeping your UI and code separate is A Good Thing.\
Three important Interface Builder things you\'92ve met so far are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Storyboards, edited using Interface Builder, but used in code too by setting storyboard identifiers.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Outlets and action from Interface Builder. Outlets connect views to named properties (e.g. 
\f2\b imageView
\f0\b0 ), and actions connect them to methods that get run, e.g. 
\f2\b buttonTapped()
\f0\b0 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Auto Layout to create rules for how elements of your interface should be positioned relative to each other.\
\pard\pardeftab720\partightenfactor0
\cf2 You\'92ll be using Interface Builder a 
\f4\i lot
\f0\i0  throughout this series. Sometimes we\'92ll make interfaces in code, but only when needed and always with good reason.\
There are three other things I want to touch on briefly, because they are important.\
First, you met the 
\f2\b Bundle
\f0\b0  class, which lets you use any assets you build into your projects, like images and text files. We used that to get the list of NSSL JPEGs in project 1, but we\'92ll use it again in future projects.\
Second, loading those NSSL JPEGs was done by scanning the app bundle using the 
\f2\b FileManager
\f0\b0  class, which lets you read and write to the iOS filesystem. We used it to scan directories, but it can also check if a file exists, delete things, copy things, and more.\
Finally, you learned how to generate truly random numbers using Swift\'92s 
\f2\b Int.random(in:)
\f0\b0  method. Swift has lots of other functionality for randomness that we\'92ll be looking at in future projects.\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs98 \cf2 Key points\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs35\fsmilli17600 \cf2 There are five important pieces of code that are important enough they warrant some revision. \
\
First, this line:\cf5 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  items = 
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 try
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 ! fm.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 contentsOfDirectory\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 (atPath: path)\
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17600 \cf2 \cb1 \shad0 The 
\f2\b fm
\f0\b0  was a reference to 
\f2\b FileManager
\f0\b0  and 
\f2\b path
\f0\b0  was a reference to the resource path from 
\f2\b Bundle
\f0\b0 , so that line pulled out an array of files at the directory where our app\'92s resources lived. But do you remember why the 
\f2\b try!
\f0\b0  was needed?\
When you ask for the contents of a directory, it\'92s possible \'96 although hopefully unlikely!\'a0\'96 that the directory doesn\'92t actually exist. Maybe you meant to look in a directory called \'93files\'94 but accidentally wrote \'93file\'94. In this situation, the 
\f2\b contentsOfDirectory()
\f0\b0  call will fail, and Swift will throw an exception \'96 it will literally refuse to continue running your code until you handle the error.\
This is important, because handling the error allows your app to behave well even when things go wrong. But in this case we got the path straight from iOS \'96 we didn\'92t type it in by hand, so if reading from our own app\'92s bundle doesn\'92t work then clearly something is very wrong indeed.\
Swift requires any calls that might fail to be called using the 
\f2\b try
\f0\b0  keyword, which forces you to add code to catch any errors that might result. However, because we know this code will work \'96\'a0it can\'92t possibly be mistyped \'96 we can use the 
\f2\b try!
\f0\b0  keyword, which means \'93don\'92t make me catch errors, because they won\'92t happen.\'94 Of course, if you\'92re wrong \'96 if errors 
\f4\i do
\f0\i0  happen\'a0\'96 then your app will crash, so be careful!\
\
The second piece of code I\'92d like to look at is this method:\cf5 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 override
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 func
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 tableView\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 (\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 _\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  tableView: \cf11 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 UITableView\cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 , numberOfRowsInSection section: \cf11 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 Int\cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 ) -> \cf11 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 Int\cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 return
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  pictures.\cf11 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 count\cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 \
\}\
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17600 \cf2 \cb1 \shad0 That was used in project 1 to make the table view show as many rows as necessary for the 
\f2\b pictures
\f0\b0  array, but it packs a lot into a small amount of space.\
To recap, we used the Single View App template when creating project 1, which gave us a single 
\f2\b UIViewController
\f0\b0  subclass called simply 
\f2\b ViewController
\f0\b0 . To make it use a table instead, we changed 
\f2\b ViewController
\f0\b0  so that it was based on 
\f2\b UITableViewController
\f0\b0 , which provides default answers to lots of questions: how many sections are there? How many rows? What\'92s in each row? What happens when a row is tapped? And so on.\
Clearly we don\'92t want the default answers to each of those questions, because our app needs to specify how many rows it wants based on its own data. And that\'92s where the 
\f2\b override
\f0\b0  keyword comes in: it means \'93I know there\'92s a default answer to this question, but I want to provide a new one.\'94 The \'93question\'94 in this case is \'93numberOfRowsInSection\'94, which expects to receive an 
\f2\b Int
\f0\b0  back: how many rows should there be?\
\
The last two pieces of code I want to look at again are these:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  cell = tableView.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 dequeueReusableCell\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 (withIdentifier: \cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 "Picture"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 , 
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 for
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 : indexPath)\
\

\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 if
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  vc = storyboard?.\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 instantiateViewController\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 (withIdentifier: \cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 "Detail"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 ) 
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 as
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 ? \cf11 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4 DetailViewController\cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc4  \{\
\}\
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17600 \cf2 \cb1 \shad0 Both of these are responsible for linking code to storyboard information using an identifier string. In the former case, it\'92s a cell reuse identifier; in the latter, it\'92s a view controller\'92s storyboard identifier. You always need to use the same name in Interface Builder and your code \'96\'a0if you don\'92t, you\'92ll get a crash because iOS doesn\'92t know what to do.\
The second of those pieces of code is particularly interesting, because of the 
\f2\b if let
\f0\b0  and 
\f2\b as? DetailViewController
\f0\b0 . When we dequeued the table view cell, we used the built-in \'93Basic\'94 style \'96 we didn\'92t need to use a custom class to work with it, so we could just crack on and set its text.\
However, the detail view controller has its own custom thing we need to work with: the 
\f2\b selectedImage
\f0\b0  string. That doesn\'92t exist on a regular 
\f2\b UIViewController
\f0\b0 , and that\'92s what the 
\f2\b instantiateViewController()
\f0\b0  method returns \'96 it doesn\'92t know (or care) what\'92s inside the storyboard, after all. That\'92s where the 
\f2\b if let
\f0\b0  and 
\f2\b as?
\f0\b0  typecast comes in: it means \'93I want to treat this is a 
\f2\b DetailViewController
\f0\b0  so please try and convert it to one.\'94\
Only if that conversion works will the code inside the braces execute \'96 and that\'92s why we can access the 
\f2\b selectedImage
\f0\b0  property safely.\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs98 \cf2 Challenge\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs35\fsmilli17600 \cf2 You have a rudimentary understanding of table views, image views, and navigation controllers, so let\'92s put them together: your challenge is to create an app that lists various world flags in a table view. When one of them is tapped, slide in a detail view controller that contains an image view, showing the same flag full size. On the detail view controller, add an action button that lets the user share the flag picture and country name using 
\f2\b UIActivityViewController
\f0\b0 .\
To solve this challenge you\'92ll need to draw on skills you learned in tutorials 1, 2, and 3:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Start with a Single View App template, then change its main 
\f2\b ViewController
\f0\b0  class so that builds on 
\f2\b UITableViewController
\f0\b0  instead.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Load the list of available flags from the app bundle. You can type them directly into the code if you want, but it\'92s preferable not to.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Create a new Cocoa Touch Class responsible for the detail view controller, and give it properties for its image view and the image to load.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
You\'92ll also need to adjust your storyboard to include the detail view controller, including using Auto Layout to pin its image view correctly.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
You will need to use 
\f2\b UIActivityViewController
\f0\b0  to share your flag.\
\pard\pardeftab720\partightenfactor0
\cf2 As always, I\'92m going to provide some hints below, but I suggest you try to complete as much of the challenge as you can before reading them.\
Hints:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
To load the images from disk you need to use three lines of code: 
\f2\b let fm = FileManager.default
\f0\b0 , then 
\f2\b let path = Bundle.main.resourcePath!
\f0\b0 , then finally 
\f2\b let items = try! fm.contentsOfDirectory(atPath: path)
\f0\b0 .\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Those lines end up giving you an array of all items in your app\'92s bundle, but you only want the pictures, so you\'92ll need to use something like the 
\f2\b hasSuffix()
\f0\b0  method.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Once you have made 
\f2\b ViewController
\f0\b0  build on 
\f2\b UITableViewController
\f0\b0 , you\'92ll need to override its 
\f2\b numberOfRowsInSection
\f0\b0  and 
\f2\b cellForRowAt
\f0\b0  methods.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You\'92ll need to assign a cell prototype identifier in Interface Builder, such as \'93Country\'94. You can then dequeue cells of that type using 
\f2\b tableView.dequeueReusableCell(withIdentifier: "Country", for: indexPath)
\f0\b0 .\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The 
\f2\b didSelectItemAt
\f0\b0  method is responsible for taking some action when the user taps a row.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Make sure your detail view controller has a property for the image name to load, as well as the 
\f2\b UIImageView
\f0\b0  to load it into. The former should be modified from 
\f2\b ViewController
\f0\b0  inside 
\f2\b didSelectItemAt
\f0\b0 ; the latter should be modified in the 
\f2\b viewDidLoad()
\f0\b0  method of your detail view controller.\
\pard\pardeftab720\partightenfactor0
\cf2 Bonus tip: try setting the 
\f2\b imageView
\f0\b0  property of the table view cell. Yes, they have one. And yes, it automatically places an image right there in the table view cell \'96 it makes a great preview for every country.\cf2 \
}
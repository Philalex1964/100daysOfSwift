{\rtf1\ansi\ansicpg1251\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red212\green212\blue212;\red252\green55\blue54;
\red222\green43\blue91;\red246\green246\blue239;\red24\green24\blue28;\red72\green212\blue251;\red157\green101\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c86275\c86275\c86275;\cssrgb\c100000\c31373\c27059;
\cssrgb\c90588\c27059\c43137;\cssrgb\c97255\c97255\c94902;\cssrgb\c12549\c12549\c14510;\cssrgb\c32941\c86275\c98824;\cssrgb\c68235\c50588\c100000;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 \expnd0\expndtw0\kerning0
Project 5, part three\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf2 I hope that today you inched a little closer to understanding closures, and that you\'92re starting to see that they are really just a very special kind of function. Sure they have weird syntax, and yes the capturing thing makes them behave in all sorts of interesting ways, but ultimately they are just anonymous functions that you pass around as if they were data.\
If you\'92re still not sure about closures, it\'92s OK: we\'92ll be using them again and again, and sooner or later they\'92ll click. You\'92d do well to remember the words of Patrick McKenzie: \'93every great developer you know got there by solving problems they were unqualified to solve until they actually did it.\'94\
Anyway, you have another project under your belt, and I hope you feel happy with everything you learned. Of course, now it\'92s time to solidify your knowledge with a test and some fresh challenges \'96\'a0you 
\f2\i need
\f1\i0  to go beyond just following along with me, otherwise you\'92ll have a hard time remembering anything in the long term.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Today you should work through the wrap up chapter for project 5, complete its review, then work through all three of its challenges. As you\'92ll see, there is also a bonus challenge today \'96\'a0you need to be a bug detective!
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/5/7/wrap-up"}}{\fldrslt \expnd0\expndtw0\kerning0
Wrap up}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/review/hws/project-5-word-scramble"}}{\fldrslt \expnd0\expndtw0\kerning0
Review for Project 5: Word Scramble}}\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf2 Wrap up\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 You've made it this far, so your Swift learning really is starting to come together, and I hope this project has shown you that you can make some pretty advanced things with your knowledge.\
In this project, you learned a little bit more about 
\f3\b UITableView
\f1\b0 : how to reload their data and how to insert rows. You also learned how to add text fields to 
\f3\b UIAlertController
\f1\b0  so that you can accept user input. But you also learned some serious core stuff: more about Swift strings, closures, 
\f3\b NSRange
\f1\b0 , and more. These are things you're going to use in dozens of projects over your Swift coding career, and things we'll be returning to again and again in this series.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 Review what you learned\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 Anyone can sit through a tutorial, but it takes actual work to remember what was taught. It\'92s my job to make sure you take as much from these tutorials as possible, so I\'92ve prepared a short review to help you check your learning.\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/review/hws/project-5-word-scramble"}}{\fldrslt \cf2 Click here to review what you learned in project 5}}.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 Challenge\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 One of the best ways to learn is to write your own code as often as possible, so here are three ways you should try extending this app to make sure you fully understand what\'92s going on:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Disallow answers that are shorter than three letters or are just our start word. For the three-letter check, the easiest thing to do is put a check into 
\f3\b isReal()
\f1\b0  that returns false if the word length is under three letters. For the second part, just compare the start word against their input word and return false if they are the same.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Refactor all the 
\f3\b else
\f1\b0  statements we just added so that they call a new method called 
\f3\b showErrorMessage()
\f1\b0 . This should accept an error message and a title, and do all the 
\f3\b UIAlertController
\f1\b0  work from there.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Add a left bar button item that calls 
\f3\b startGame()
\f1\b0 , so users can restart with a new word whenever they want to.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Bonus:
\f1\b0  Once you\'92ve done those three, there\'92s a really subtle bug in our game and I\'92d like you to try finding and fixing it.\
To trigger the bug, look for a three-letter word in your starting word, and enter it with an uppercase letter. Once it appears in the table, try entering it again all lowercase \'96\'a0you\'92ll see it gets entered. Can you figure out what causes this and how to fix it?\
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 Hints\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 It is 
\f2\i vital
\f1\i0  to your learning that you try the challenges above yourself, and not just for a handful of minutes before you give up.\
Every time you try something wrong, you learn that it\'92s wrong and you\'92ll remember that it\'92s wrong. By the time you find the 
\f2\i correct
\f1\i0  solution, you\'92ll remember it much more thoroughly, while also remembering a lot of the wrong turns you took.\
This is what I mean by \'93there is no learning without struggle\'94: if something comes easily to you, it can go just as easily. But when you have to really mentally fight for something, it will stick much longer.\
But if you\'92ve already worked hard at the challenges above and are still struggling to implement them, I\'92m going to write some hints below that should guide you to the correct answer.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 If you ignore me and read these hints without having spent at least 30 minutes trying the challenges above, the only person you\'92re cheating is yourself.
\f1\b0 \
Still here? OK. If you\'92re stuck on the bug finding bonus challenge, take a look at this line of code:\
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 usedWords.\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 insert\cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (answer, at: \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 0\cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 Is that what it should be?\
}
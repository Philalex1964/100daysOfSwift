{\rtf1\ansi\ansicpg1251\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red212\green212\blue212;\red0\green0\blue0;\red251\green2\blue7;
\red252\green55\blue54;\red128\green0\blue2;\red222\green43\blue91;\red235\green0\blue121;\red24\green24\blue28;
\red246\green246\blue239;\red215\green165\blue255;\red72\green212\blue251;\red157\green101\blue255;\red248\green60\blue79;
}
{\*\expandedcolortbl;;\cssrgb\c86275\c86275\c86275;\cssrgb\c0\c0\c0;\cssrgb\c100000\c14913\c0;
\cssrgb\c100000\c31373\c27059;\cssrgb\c58072\c6673\c0;\cssrgb\c90588\c27059\c43137;\cssrgb\c94902\c14118\c54902;\cssrgb\c12549\c12549\c14510;
\cssrgb\c97255\c97255\c94902;\cssrgb\c87843\c72157\c100000;\cssrgb\c32941\c86275\c98824;\cssrgb\c68235\c50588\c100000;\cssrgb\c98824\c33725\c38039;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17600 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\qc\partightenfactor0

\f1\b\fs70 \cf3 Day 17. Project 1, part one\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf3 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf3 Dennis Ritchie, the inventor of the C programming language and co-inventor of UNIX, once said \'93the only way to learn a new programming language is by writing programs in it.\'94\
He was right, of course. You\'92ve spent the last 15 days learning and reviewing the fundamentals of the Swift programming language, but now it\'92s time to put everything you\'92ve learned into practice by building real iOS projects in Swift.\
As you\'92ll see, building an app is like standing on the shoulders of giants \'96 Apple\'92s UIKit framework gives us an incredible user interface to work with, so if you bring the Swift skills and they bring the development platform the only thing between you and a great App Store income is a killer idea.\
I can\'92t help with the idea, but I 
\f2\i can
\f0\i0  teach you to build apps. So, from here on you\'92ll be putting your knowledge into practice.\
\pard\pardeftab720\partightenfactor0

\f1\b \cf3 Today you have three topics to work through, and you\'92ll meet view controllers, storyboards, and the 
\f3 \cf4 FileManager
\f1 \cf3  class.
\f0\b0  As you progress through the projects in this series the pace will quicken, but for now we\'92re taking things slow so you have time to get comfortable.\cf2 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/1/1/setting-up"}}{\fldrslt \expnd0\expndtw0\kerning0
Setting up}}\cf2 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/1/2/listing-images-with-filemanager"}}{\fldrslt \expnd0\expndtw0\kerning0
Listing images with FileManager}}\cf2 \expnd0\expndtw0\kerning0
\
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/1/3/designing-our-interface"}}{\fldrslt \expnd0\expndtw0\kerning0
Designing our interface}}\expnd0\expndtw0\kerning0
\
\pard\tx560\pardeftab720\partightenfactor0
\cf5 \
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs98 \cf3 Setting up
\f0\b0\fs35\fsmilli17600 \
\
\pard\pardeftab720\partightenfactor0
\cf3 You'll be starting and stopping projects a lot as you learn, so there are three basic tips you need to know:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You can run your project by pressing \cf4 Cmd+R\cf6 .\cf3  This is equivalent to clicking the play button.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You can stop a running project by pressing \cf4 Cmd+\cf3 . when Xcode is selected.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If you have made changes to a running project, just press Cmd+R again. Xcode will prompt you to stop the current run before starting another. Make sure you check the "Do not show this message again" box to avoid being bothered in the future.\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs98 \cf3 Listing images with FileManager
\f0\b0\fs35\fsmilli17600 \cf2 \
\cf3 \
\pard\pardeftab720\partightenfactor0
\cf3 Behind the scenes, an iOS app is actually a directory containing lots of files: the binary itself (that's the compiled version of your code, ready to run), all the media assets your app uses, any visual layout files you have, plus a variety of other things such as metadata and security entitlements.\
These app directories are called bundles, and they have the file extension .app. Because our media files are loose inside the folder, we can ask the system to tell us all the files that are in there then pull out the ones we want. You may have noticed that all the images start with the name "nssl" (short for National Severe Storms Laboratory), so our task is simple: list all the files in our app's directory, and pull out the ones that start with "nssl".\
\
For now, we\'92ll load that list and just print it to Xcode\'92s built in log viewer, but soon we\'92ll make them appear in our app.\
So, step 1: open ViewController.swift. A view controller is best thought of as being one screen of information, and for us that\'92s just one big blank screen. ViewController.swift is responsible for showing that blank screen, and right now it won\'92t contain much code. You should see something like this:\
\
\
That contains four interesting things I want to discuss before moving on.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
The file starts with 
\f3\b import UIKit
\f0\b0 , which means \'93this file will reference the iOS user interface toolkit.\'94\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
The 
\f3\b class ViewController: UIViewController
\f0\b0  line means \'93I want to create a new screen of data called ViewController, based on UIViewController.\'94 When you see a data type that starts with \'93UI\'94, it means it comes from UIKit. 
\f3\b UIViewController
\f0\b0  is Apple\'92s default screen type, which is empty and white until we change it.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
The line 
\f3\b override func viewDidLoad()
\f0\b0  starts a method. As you know, the 
\f3\b override
\f0\b0  keyword is needed because it means \'93we want to change Apple\'92s default behavior from 
\f3\b UIViewController
\f0\b0 .\'94 
\f3\b viewDidLoad()
\f0\b0  is called by UIKit when the screen has loaded, and is ready for you to customize.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
The 
\f3\b viewDidLoad()
\f0\b0  method contains one line of code saying 
\f3\b super.viewDidLoad()
\f0\b0  and one line of comment (that\'92s the line starting with 
\f3\b //
\f0\b0 ). This 
\f3\b super
\f0\b0  call means \'93tell Apple\'92s 
\f3\b UIViewController
\f0\b0  to run its own code before I run mine,\'94 and you\'92ll see this used a lot.\
\pard\pardeftab720\partightenfactor0
\cf3 We\'92ll come back to this code a 
\f2\i lot
\f0\i0  in future projects; don\'92t worry if it\'92s all a bit hazy right now.\
\cf2 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf3 No line numbers?
\f0\b0  While you\'92re reading code, it\'92s frequently helpful to have line numbers enabled so you can refer to specific code more easily. If your Xcode isn't showing line numbers by default, I suggest you turn them on now: go to the Xcode menu and choose Preferences, then choose the Text Editing tab and make sure "Line numbers" is checked.\
As I said before, the 
\f3\b viewDidLoad()
\f0\b0  method is called when the screen has loaded and is ready for you to customize. We're going to put some more code into that method to load the NSSL images. Add this beneath the line that says 
\f3\b super.viewDidLoad()
\f0\b0 :\cf2 \
\
\

\f1\b \cf3 Note:
\f0\b0  Some experienced Swift developers will read that code, see 
\f3\b try!
\f0\b0 , then write me an angry email. If you\'92re considering doing just that, please continue reading first.\
That\'92s a big chunk of code, most of which is new. Let\'92s walk through what it does line by line:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The line 
\f3\b let fm = FileManager.default
\f0\b0  declares a constant called 
\f3\b fm
\f0\b0  and assigns it the value returned by 
\f3\b FileManager.default
\f0\b0 . This is a data type that lets us work with the filesystem, and in our case we'll be using it to look for files.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The line 
\f3\b let path = Bundle.main.resourcePath!
\f0\b0  declares a constant called 
\f3\b path
\f0\b0  that is set to the resource path of our app's bundle. Remember, a bundle is a directory containing our compiled program and all our assets. So, this line says, "tell me where I can find all those images I added to my app."\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The line 
\f3\b let items = try! fm.contentsOfDirectory(atPath: path)
\f0\b0  declares a third constant called 
\f3\b items
\f0\b0  that is set to the contents of the directory at a path. Which path? Well, the one that was returned by the line before. As you can see, Apple's long method names really does make their code quite self-descriptive! The 
\f3\b items
\f0\b0  constant will be an array of strings containing filenames.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The line 
\f3\b for item in items \{
\f0\b0  starts a loop that will execute once for every item we found in the app bundle. Remember: the line has an opening brace at the end, signaling the start of a new block of code, and there's a matching closing brace four lines beneath. Everything inside those braces will be executed each time the loop goes around.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The line 
\f3\b if item.hasPrefix("nssl") \{
\f0\b0  is the first line inside our loop. By this point, we'll have the first filename ready to work with, and it'll be called 
\f3\b item
\f0\b0 . To decide whether it's one we care about or not, we use the 
\f3\b hasPrefix()
\f0\b0  method: it takes one parameter (the prefix to search for) and returns either true or false. That "if" at the start means this line is a conditional statement: if the item has the prefix "nssl", then\'85 that's right, another opening brace to mark another new code block. This time, the code will be executed only if 
\f3\b hasPrefix()
\f0\b0  returned true.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Finally, the line 
\f3\b // this is a picture to load!
\f0\b0  is a comment \'96 if we reach here, 
\f3\b item
\f0\b0  contains the name of a picture to load from our bundle, so we need to store it somewhere.\
\pard\tx560\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\partightenfactor0
\cf3 In this instance it\'92s perfectly fine to use 
\f3\b Bundle.main.resourcePath!
\f0\b0  and 
\f3\b try!
\f0\b0 , because if this code fails it means our app can't read its own data so something must be seriously wrong. Some Swift developers attempt to write code to handle these catastrophic errors at runtime, but sadly all too often they just mask the actual problem that occurred.\
Right now our code loads the list of files that are inside our app bundle, then loops over them all to find the ones with a name that begins with \'93nssl\'94. However, it doesn\'92t actually 
\f2\i do
\f0\i0  anything with those files, so our next step is to create an array of all the \'93nssl\'94 pictures so we can refer to them later rather than having to re-read the resources directory again and again.\
\
The three constants we already created \'96\'a0
\f3\b fm
\f0\b0 , 
\f3\b path
\f0\b0 , and 
\f3\b items
\f0\b0  \'96\'a0live inside the 
\f3\b viewDidLoad()
\f0\b0  method, and will be destroyed as soon as that method finishes. What we want is a way to attach data to the whole 
\f3\b ViewController
\f0\b0  type so that it will exist for as long as our screen exists. So, this a perfect example of when to use a property \'96 we can give our 
\f3\b ViewController
\f0\b0  class as many of these properties as we want, then read and write them as often as needed while the screen exists.\
To create a property, you need to declare it 
\f2\i outside
\f0\i0  of methods. We\'92ve been creating constants using 
\f3\b let
\f0\b0  so far, but this array is going to be changed inside our loop so we need to make it variable. We also need to tell Swift exactly what kind of data it will hold \'96 in our case that\'92s an array of strings, where each item will be the name of an \'93nssl\'94 picture.\
Add this line of code 
\f2\i before
\f0\i0  
\f3\b viewDidLoad()
\f0\b0 :\
\pard\pardeftab720\partightenfactor0

\f3\b\fs36 \cf8 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  pictures = [\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ]()
\f0\fs35\fsmilli17600 \cf3 \cb1 \shad0 \
\
That 
\f3\b pictures
\f0\b0  array will be created when the 
\f3\b ViewController
\f0\b0  screen is created, and exist for as long as the screen exists. It will be empty, because we haven\'92t actually filled it with anything, but at least it\'92s there ready for us to fill.\
What we 
\f2\i really
\f0\i0  want is to add to the 
\f3\b pictures
\f0\b0  array all the files we match inside our loop. To do that, we need to replace the existing 
\f3\b // this is a picture to load!
\f0\b0  comment with code to add each picture to the 
\f3\b pictures
\f0\b0  array.\
Helpfully, Swift\'92s arrays have a built-in method called 
\f3\b append
\f0\b0  that we can use to add any items we want. So, replace the 
\f3\b // this is a picture to load!
\f0\b0  comment with this:\

\f4\fs36 \cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 pictures.\cf12 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 append\cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (item)
\f0\fs35\fsmilli17600 \cf3 \cb1 \shad0 \
\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs98 \cf3 Designing our interface
\f0\b0\fs35\fsmilli17600 \
Instead of a boring old 
\f3\b UIViewController
\f0\b0 , we want a fancy new 
\f3\b UITableViewController
\f0\b0  to match the change we made in our code. To create one, press \cf4 Cmd+Shift+L\cf3  to show the object library. Alternatively, if you dislike keyboard shortcuts you can go to the View menu and choose Libraries > Show Library instead.\
\pard\pardeftab720\partightenfactor0

\f1\b \cf3 Tip:
\f0\b0  If you want the object library to remain open after you drag something out, use \cf4 Alt+Cmd+Shift+L\cf3  and it will be a movable, resizable window when it appears.\
\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs70 \cf3 Finishing touches for the user interface\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs35\fsmilli17600 \cf3 press Alt+Cmd+3 to activate the identity inspector (or go to View > Utilities > Show Identity Inspector), then look at the very top for a box named \'93Class\
\
press Alt+Cmd+4 to activate the attributes inspector (or go to View > Utilities > Show Attributes Inspector), then look for the checkbox named \'93Is Initial View Controller\'94 and make sure it\'92s checked.
\f1\b\fs70 \

\f0\b0\fs35\fsmilli17600 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs70 \cf3 Showing lots of rows
\f0\b0\fs35\fsmilli17600 \
As promised, the next thing to come is 
\f3\b tableView: UITableView
\f0\b0 , which is the table view that triggered the code. But this contains two pieces of information at once: 
\f3\b tableView
\f0\b0  is the name that we can use to reference the table view inside the method, and 
\f3\b UITableView
\f0\b0  is the data type \'96 the bit that describes what it is.\
\
The most important part of the method comes next: 
\f3\b numberOfRowsInSection section: Int
\f0\b0 . This describes what the method actually does. We know it involves a table view because that's the name of the method, but the 
\f3\b numberOfRowsInSection
\f0\b0  part is the actual action: this code will be triggered when iOS wants to know how many rows are in the table view. The 
\f3\b section
\f0\b0  part is there because table views can be split into sections, like the way the Contacts app separates names by first letter. We only have one section, so we can ignore this number. The 
\f3\b Int
\f0\b0  part means \'93this will be an integer,\'94 which means a whole number like 3, 30, or 35678 number.\'94\
\
There was one more thing I missed out, and I missed it out for a reason: it\'92s a bit confusing at this point in your Swift career. Did you notice that 
\f3\b _
\f0\b0  in there? I hope you can remember that means the first parameter isn\'92t passed in using a name when called externally \'96\'a0this is a remnant of Objective-C, where the name of the first parameter was usually built right into the method name.\
In this instance, the method is called 
\f3\b tableView()
\f0\b0  because its first parameter is the table view that you\'92re working with. It wouldn\'92t make much sense to write 
\f3\b tableView(tableView: someTableView)
\f0\b0 , so using the underscore means you would write 
\f3\b tableView(someTableView)
\f0\b0  instead.\cf2 \
\

\f1\b\fs70 \cf3 Dequeuing cells\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs35\fsmilli17600 \cf3 That\'92s the first of two methods we need to write to complete this stage of the app. The second is to specify what each row should look like, and it follows a similar naming convention to the previous method. Add this code now:\cf2 \
\pard\pardeftab720\partightenfactor0

\f3\b\fs36 \cf8 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 override
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f3\b \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 func
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf12 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 tableView\cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf13 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 _\cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  tableView: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITableView\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , cellForRowAt indexPath: \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 IndexPath\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ) -> \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITableViewCell\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
    
\f3\b \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  cell = tableView.\cf12 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 dequeueReusableCell\cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (withIdentifier: \cf14 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Picture"\cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , 
\f3\b \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : indexPath)\
    cell.textLabel?.text = pictures[indexPath.row]\
    
\f3\b \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 return
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  cell\
\}\
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17600 \cf3 \cb1 \shad0 Let\'92s break it down into parts again, so you can see exactly how it works.\
First, 
\f3\b override func tableView(_ tableView: UITableView
\f0\b0  is identical to the previous method: the method name is just 
\f3\b tableView()
\f0\b0 , and it will pass in a table view as its first parameter. The 
\f3\b _
\f0\b0  means it doesn\'92t need to have a name sent externally, because it\'92s the same as the method name.\
Second, 
\f3\b cellForRowAt indexPath: IndexPath
\f0\b0  is the important part of the method name. The method is called 
\f3\b cellForRowAt
\f0\b0 , and will be called when you need to provide a row. The row to show is specified in the parameter: 
\f3\b indexPath
\f0\b0 , which is of type 
\f3\b IndexPath
\f0\b0 . This is a data type that contains both a section number and a row number. We only have one section, so we can ignore that and just use the row number.\
Third, 
\f3\b -> UITableViewCell
\f0\b0  means this method must return a table view cell. If you remember, we created one inside Interface Builder and gave it the identifier \'93Picture\'94, so we want to use that.\
Here\'92s where a little bit of iOS magic comes in: if you look at the Settings app, you\'92ll see it can fit only about 12 rows on the screen at any given time, depending on the size of your phone.\
To save CPU time and RAM, iOS only creates as many rows as it needs to work. When one rows moves off the top of the screen, iOS will take it away and put it into a reuse queue ready to be recycled into a new row that comes in from the bottom. This means you can scroll through hundreds of rows a second, and iOS can behave lazily and avoid creating any new table view cells \'96\'a0it just recycles the existing ones.\
This functionality is baked right into iOS, and it\'92s exactly what our code does on this line:\cf2 \
\pard\pardeftab720\partightenfactor0

\f3\b\fs36 \cf8 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  cell = tableView.\cf12 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 dequeueReusableCell\cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (withIdentifier: \cf14 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Picture"\cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , 
\f3\b \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f4\b0 \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : indexPath)\
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17600 \cf3 \cb1 \shad0 That creates a new constant called 
\f3\b cell
\f0\b0  by dequeuing a recycled cell from the table. We have to give it the identifier of the cell type we want to recycle, so we enter the same name we gave Interface Builder: \'93Picture\'94. We also pass along the index path that was requested; this gets used internally by the table view.\
That will return to us a table view cell we can work with to display information. You can create your own custom table view cell designs if you want to (more on that much later!), but we\'92re using the built-in Basic style that has a text label. That\'92s where line two comes in: it gives the text label of the cell the same text as a picture in our array. Here\'92s the code again:\cf2 \
\pard\pardeftab720\partightenfactor0

\f4\fs36 \cf10 \cb9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 cell.textLabel?.text = pictures[indexPath.row]\
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17600 \cf3 \cb1 \shad0 The 
\f3\b cell
\f0\b0  has a property called 
\f3\b textLabel
\f0\b0 , but it\'92s optional: there might be a text label, or there might not be \'96\'a0if you had designed your own, for example. Rather than write checks to see if there is a text label or not, Swift lets us use a question mark \'96\'a0
\f3\b textLabel?
\f0\b0  \'96\'a0to mean \'93do this only if there is an actual text label there, or do nothing otherwise.\'94\
We want to set the label text to be the name of the correct picture from our 
\f3\b pictures
\f0\b0  array, and that\'92s exactly what the code does. 
\f3\b indexPath.row
\f0\b0  will contain the row number we\'92re being asked to load, so we\'92re going to use that to read the corresponding picture from 
\f3\b pictures
\f0\b0 , and place it into the cell\'92s text label.\
The last line in the method is 
\f3\b return cell
\f0\b0 . Remember, this method expects a table view cell to be returned, so we need to send back the one we created \'96 that\'92s what the 
\f3\b return cell
\f0\b0  does.\
With those two pretty small methods in place, you can run your code again now and see how it looks. All being well you should now see 10 table view cells, each one with a different picture name inside. If you click on one of them it will turn gray, but nothing else will happen. Let\'92s fix that now\'85}
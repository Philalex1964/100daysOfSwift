{\rtf1\ansi\ansicpg1251\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red212\green212\blue212;\red222\green43\blue91;
\red252\green55\blue54;\red235\green0\blue121;\red24\green24\blue28;\red246\green246\blue239;\red103\green225\blue255;
\red215\green165\blue255;\red72\green212\blue251;\red157\green101\blue255;\red248\green60\blue79;\red93\green108\blue125;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c86275\c86275\c86275;\cssrgb\c90588\c27059\c43137;
\cssrgb\c100000\c31373\c27059;\cssrgb\c94902\c14118\c54902;\cssrgb\c12549\c12549\c14510;\cssrgb\c97255\c97255\c94902;\cssrgb\c46275\c90196\c100000;
\cssrgb\c87843\c72157\c100000;\cssrgb\c32941\c86275\c98824;\cssrgb\c68235\c50588\c100000;\cssrgb\c98824\c33725\c38039;\cssrgb\c43922\c50196\c56471;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 \expnd0\expndtw0\kerning0
Project 7, part one\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf2 One of the joys of working on Apple platforms is that it can feel like there\'92s no end to exciting technologies to try \'96\'a0whether that\'92s ARKit, Core ML, SpriteKit, or any of the dozens of other things, I don\'92t think there\'92s ever been a better time to get into software development.\
But \'96\'a0and this is a big but! \'96\'a0as wonderful as those things are, a large part of our work as iOS developers is always going to involve the fundamentals of app development: receiving some data, formatting in a specific way, and making it look good on-screen.\
Today you\'92re going to meet one of the truly great features of Swift development, and it also happens to be part of probably the most important skill. That feature is called the 
\f2\b Codable
\f1\b0  protocol, and its job is to convert Swift data like strings, dictionaries, or structs to and from data that can be transferred over the internet.\
Computing pioneer Mitch Kapor once said that \'93getting information off the internet is like taking a drink from a fire hydrant.\'94 This is true: there\'92s a lot of it out there, and we need to be really careful how we read it in to our apps.\
Fortunately, 
\f2\b Codable
\f1\b0  does most of the work for us \'96\'a0I think you\'92ll be impressed!\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Today you have three topics to work through, and you\'92ll learn about 
\f2 UITabBarController
\f0 , 
\f2 Data
\f0 , 
\f2 Codable
\f0 , and more.
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/7/1/setting-up"}}{\fldrslt \expnd0\expndtw0\kerning0
Setting up}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/7/2/creating-the-basic-ui-uitabbarcontroller"}}{\fldrslt \expnd0\expndtw0\kerning0
Creating the basic UI: UITabBarController}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/7/3/parsing-json-using-the-codable-protocol"}}{\fldrslt \expnd0\expndtw0\kerning0
Parsing JSON using the Codable protocol}}\expnd0\expndtw0\kerning0
\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf2 Creating the basic UI: UITabBarController
\f1\b0\fs35\fsmilli17600 \
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
We\'92ve already used 
\f2\b UINavigationController
\f1\b0  in previous projects to provide a core user interface that lets us control which screen is currently visible. Another fundamental UI component is the tab bar, which you see in apps such as the App Store, Music, and Photos \'96\'a0it lets the user control which screen they want to view by tapping on what interests them.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Our current app has a single empty view controller, but we\'92re going to jazz that up with a table view controller, a navigation controller, and a tab bar controller so you can see how they all work together.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You should know the drill by now, or at least part of it. Start by opening ViewController.swift and changing 
\f2\b ViewController
\f1\b0  to inherit from 
\f2\b UITableViewController
\f1\b0  rather than 
\f2\b UIViewController
\f1\b0 . That is, change this line:\
\ls2\ilvl0
\f2\b\fs36 \cf6 \cb7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\shad\shadx0\shady-20\shadr0\shado0 \shadc0 class
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ViewController\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UIViewController\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
\ls2\ilvl0
\f1\fs35\fsmilli17600 \cf2 \cb1 \kerning1\expnd0\expndtw0 \shad0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'85to this:\
\ls2\ilvl0
\f2\b\fs36 \cf6 \cb7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\shad\shadx0\shady-20\shadr0\shado0 \shadc0 class
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ViewController\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITableViewController\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
\ls2\ilvl0
\f1\fs35\fsmilli17600 \cf3 \cb1 \kerning1\expnd0\expndtw0 \shad0 {\listtext	\uc0\u8226 	}\cf2 \expnd0\expndtw0\kerning0
Now open Main.storyboard, remove the existing view controller, and drag out a table view controller in its place. Use the identity inspector to change its class to be \'93ViewController\'94, then make sure you check the \'93Is Initial View Controller\'94 box.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Select its prototype cell and use the attributes inspector to give it the identifier \'93Cell\'94. Set its accessory to \'93Disclosure Indicator\'94 while you\'92re there; it\'92s a great UI hint, and it\'92s perfect in this project. In this project, we\'92re also going to change the style of the cell \'96\'a0that\'92s the first item in the attributes inspector. It\'92s \'93Custom\'94 by default, but I\'92d like you to change it to \'93Subtitle\'94, so that each row has a main title label and a subtitle label.\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 ow for the interesting part: we need to wrap this view controller inside two other things. Go to Editor > Embed In > Navigation Controller, and then straight away go to Editor > Embed In > Tab Bar Controller. The navigation controller adds a gray bar at the top called a navigation bar, and the tab bar controller adds a gray bar at the bottom called a tab bar. Hit Cmd+R now to see them both in action.\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 Behind the scenes, 
\f2\b UITabBarController
\f1\b0  manages an array of view controllers that the user can choose between. You can often do most of the work inside Interface Builder, but not in this project. We're going to use one tab to show recent petitions, and another to show popular petitions, which is the same thing really \'96 all that's changing is the data source.\
Doing everything inside the storyboard would mean duplicating our view controllers, which is A Bad Idea, so instead we're just going to design one of them in the storyboard then create a duplicate of it using code.\
Now that our navigation controller is inside a tab bar controller, it will have acquired a gray strip along its bottom in Interface Builder. If you click that now, it will select a new type of object called a 
\f2\b UITabBarItem
\f1\b0 , which is the icon and text used to represent a view controller in the tab bar. In the attributes inspector (Alt+Cmd+4) change System Item from "Custom" to "Most Recent".\
\
One important thing about 
\f2\b UITabBarItem
\f1\b0  is that when you set its system item, it assigns both an icon and some text for the title of the tab. If you try to change the text to your own text, the icon will be removed and you need to provide your own. This is because Apple has trained users to associate certain icons with certain information, and they don't want you using those icons incorrectly!\
Select the navigation controller itself (just click where it says Navigation Controller in big letters in the center of the view controller), then press Alt+Cmd+3 to select the identity inspector. We haven't been here before, because it's not used that frequently. However, here I want you to type "NavController" in the text box to the right of where it says "Storyboard ID". We'll be needing that soon!\
In the picture below you can see how the identity inspector should look when configured for your navigation controller. You'll be using this inspector in later projects to give views a custom class by changing the first of these four text boxes.\
\
We're done with Interface Builder, so please open the file ViewController.swift so we can make the usual changes to get us a working table view.\
First, add this property to the 
\f2\b ViewController
\f1\b0  class:\cf3 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  petitions = [\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ]()\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 That will hold our petitions. We won\'92t be using strings in the final project \'96 in fact we\'92ll change that in the next chapter \'96 but it\'92s good enough for now.\
Now add this 
\f2\b numberOfRowsInSection
\f1\b0  method:\cf3 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 override
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 func
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 tableView\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 _\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  tableView: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITableView\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , numberOfRowsInSection section: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Int\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ) -> \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Int\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 return
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  petitions.\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 count\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 We also need to add a 
\f2\b cellForRowAt
\f1\b0  method, but this time it\'92s going to be a bit different: we\'92re going to set some dummy 
\f2\b textLabel.text
\f1\b0  like before, but we\'92re also going to set 
\f2\b detailTextLabel.text
\f1\b0  \'96 that\'92s the subtitle in our cell. It\'92s called \'93detail text label\'94 rather than \'93subtitle\'94 because there are other styles available, for example one where the detail text is on the right of the main text.\
Add this method now:\cf3 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 override
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 func
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 tableView\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 _\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  tableView: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITableView\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , cellForRowAt indexPath: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 IndexPath\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ) -> \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 UITableViewCell\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  cell = tableView.\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 dequeueReusableCell\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (withIdentifier: \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Cell"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , 
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 for
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : indexPath)\
    cell.textLabel?.text = \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Title goes here"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    cell.detailTextLabel?.text = \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Subtitle goes here"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 return
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  cell\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 Step one is now complete: we have a basic user interface in place, and are ready to proceed with some real code\'85\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf2 Parsing JSON using the Codable protocol
\f1\b0\fs35\fsmilli17600 \
JSON \'96 short for JavaScript Object Notation \'96 is a way of describing data. It's not the easiest to read yourself, but it's compact and easy to parse for computers, which makes it popular online where bandwidth is at a premium.\
Before we do the parsing, here is a tiny slice of the actual JSON you'll be receiving:\cf3 \
\pard\pardeftab720\partightenfactor0

\f3\fs36 \cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \{\
    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "metadata"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\{\
        \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "responseInfo"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\{\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "status"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 200\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "developerMessage"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "OK"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
        \}\
    \},\
    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "results"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :[\
        \{\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "title"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Legal immigrants should get freedom before undocumented immigrants \'96 moral, just and fair"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "body"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "I am petitioning President Trump's Administration to take a humane view of the plight of legal immigrants. Specifically, legal immigrants in Employment Based (EB) category. I believe, such immigrants were short changed in the recently announced reforms via Executive Action (EA), which was otherwise long due and a welcome announcement."\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "issues"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :[\
                \{\
                    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "id"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "28"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
                    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "name"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Human Rights"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
                \},\
                \{\
                    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "id"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "29"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
                    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "name"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Immigration"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
                \}\
            ],\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "signatureThreshold"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100000\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "signatureCount"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 267\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "signaturesNeeded"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 99733\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
        \},\
        \{\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "title"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "National database for police shootings."\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "body"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "There is no reliable national data on how many people are shot by police officers each year. In signing this petition, I am urging the President to bring an end to this absence of visibility by creating a federally controlled, publicly accessible database of officer-involved shootings."\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "issues"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :[\
                \{\
                    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "id"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "28"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
                    \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "name"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Human Rights"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
                \}\
            ],\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "signatureThreshold"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 100000\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "signatureCount"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 17453\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
            \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "signaturesNeeded"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 82547\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ,\
        \}\
    ]\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 You'll actually be getting between 2000-3000 lines of that stuff, all containing petitions from US citizens about all sorts of political things. It doesn't really matter (to us) what the petitions are, we just care about the data structure. In particular:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	1	}\cf2 \expnd0\expndtw0\kerning0
There's a metadata value, which contains a 
\f2\b responseInfo
\f1\b0  value, which in turn contains a status value. Status 200 is what internet developers use for "everything is OK."\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
There's a results value, which contains a series of petitions.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Each petition contains a title, a body, some issues it relates to, plus some signature information.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
JSON has strings and integers too. Notice how the strings are all wrapped in quotes, whereas the integers aren't.\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 Swift has built-in support for working with JSON using a protocol called 
\f2\b Codable
\f1\b0 . When you say \'93my data conforms to 
\f2\b Codable
\f1\b0 \'94, Swift will allow you to convert freely between that data and JSON using only a little code.\
Swift\'92s simple types like 
\f2\b String
\f1\b0  and 
\f2\b Int
\f1\b0  automatically conform to 
\f2\b Codable
\f1\b0 , and arrays and dictionaries also conform to 
\f2\b Codable
\f1\b0  if they contain 
\f2\b Codable
\f1\b0  objects. That is, 
\f2\b [String]
\f1\b0  conforms to 
\f2\b Codable
\f1\b0  just fine, because 
\f2\b String
\f1\b0  itself conforms to 
\f2\b Codable
\f1\b0 .\
Here, though, we need something more complex: each petition contains a title, some body text, a signature count, and more. That means we need to define a custom struct called 
\f2\b Petition
\f1\b0  that stores one petition from our JSON, which means it will track the title string, body string, and signature count integer.\
So, start by pressing Cmd+N and choosing to create a new Swift file called Petition.swift.\cf3 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 struct
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Petition\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  title: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  body: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  signatureCount: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Int\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 That defines a custom struct with three properties. You might remember that one of the advantages of structs in Swift is that it gives us a 
\f4\i memberwise initializer
\f1\i0  \'96\'a0a special function that can create new 
\f2\b Petition
\f1\b0  instances by passing in values for 
\f2\b title
\f1\b0 , 
\f2\b body
\f1\b0 , and 
\f2\b signatureCount
\f1\b0 .\
We\'92ll come onto that in a moment, but first I mentioned the 
\f2\b Codable
\f1\b0  protocol. Our 
\f2\b Petition
\f1\b0  struct contains two strings and an integer, all of which conforms to 
\f2\b Codable
\f1\b0  already, so we can ask Swift to make the whole 
\f2\b Petition
\f1\b0  type conform to 
\f2\b Codable
\f1\b0  like this:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 struct
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Petition\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Codable\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  title: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  body: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  signatureCount: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Int\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 With that simple change we\'92re almost ready to load instances of 
\f2\b Petition
\f1\b0  from JSON.\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 I say 
\f4\i almost
\f1\i0  ready because there\'92s a slight wrinkle in our plan: if you looked at the JSON example I gave above, you\'92ll have noticed that our array of petitions actually comes inside a dictionary called \'93results\'94. This means when we try to have Swift parse the JSON we need to load that key first, then 
\f4\i inside
\f1\i0  that load the array of petition results.\
Swift\'92s 
\f2\b Codable
\f1\b0  protocol needs to know exactly where to find its data, which in this case means making a 
\f4\i second
\f1\i0  struct. This one will have a single property called 
\f2\b results
\f1\b0  that will be an array of our 
\f2\b Petition
\f1\b0  struct. This matches exactly how the JSON looks: the main JSON contains the 
\f2\b results
\f1\b0  array, and each item in that array is a 
\f2\b Petition
\f1\b0 .\
So, press Cmd+N again to make a new file, choosing Swift file and naming it Petitions.swift. Give it this content:\cf3 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 struct
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Petitions\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 : \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Codable\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  results: [\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Petition\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ]\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 I realize this seems like a lot of work, but trust me: it gets much easier!\
\
All we\'92ve done is define the kinds of data structures we want to load the JSON into. The next step is to create a property in 
\f2\b ViewController
\f1\b0  that will store our petitions array.\
As you'll recall, you declare arrays just by putting the data type in brackets, like this:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  petitions = [\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ]()\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 We want to make an array of our 
\f2\b Petition
\f1\b0  object. So, it looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  petitions = [\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Petition\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ]()\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 Put that in place of the current 
\f2\b petitions
\f1\b0  definition at the top of ViewController.swift.\
\
It's now time to parse some JSON, which means to process it and examine its contents. We're going to start by updating the 
\f2\b viewDidLoad()
\f1\b0  method for 
\f2\b ViewController
\f1\b0  so that it downloads the data from the Whitehouse petitions server, converts it to a Swift 
\f2\b Data
\f1\b0  object, then tries to convert it to an array of 
\f2\b Petition
\f1\b0  instances.\
We haven\'92t used 
\f2\b Data
\f1\b0  before. Like 
\f2\b String
\f1\b0  and 
\f2\b Int
\f1\b0  it\'92s one of Swift\'92s fundamental data types, although it\'92s even more low level \'96 it holds literally any binary data. It might be a string, it might be the contents of a zip file, or literally anything else.\

\f2\b Data
\f1\b0  and 
\f2\b String
\f1\b0  have quite a few things in common. You already saw that 
\f2\b String
\f1\b0  can be created using 
\f2\b contentsOf
\f1\b0  to load data from disk, and 
\f2\b Data
\f1\b0  has exactly the same initializer.\
This is perfect for our needs \'96\'a0here's the new 
\f2\b viewDidLoad
\f1\b0  method:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 override
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 func
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 viewDidLoad\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 () \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 super
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 viewDidLoad\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
\
    \cf14 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // let urlString = "https://api.whitehouse.gov/v1/petitions.json?limit=100"\cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  urlString = \cf13 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "https://www.hackingwithswift.com/samples/petitions-1.json"\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 if
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  url = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 URL\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (string: urlString) \{\
        
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 if
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  data = 
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 try
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ? \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Data\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (contentsOf: url) \{\
            \cf14 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 // we're OK to parse!\cf8 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs35\fsmilli17600 \cf2 \cb1 \shad0 Note:
\f1\b0  Above I\'92ve included a URL for the official Whitehouse API feed, but that might go away or change at any point in the future. So, to avoid problems I\'92ve taken a copy of that feed and put it on my own site \'96\'a0you can use either the official API or my own copy.\
Let's focus on the new stuff:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f2\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
urlString
\f1\b0  points either to the Whitehouse.gov server or to my cached copy of the same data, accessing the available petitions.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
We use 
\f2\b if let
\f1\b0  to make sure the 
\f2\b URL
\f1\b0  is valid, rather than force unwrapping it. Later on you can return to this to add more URLs, so it's good play it safe.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
We create a new 
\f2\b Data
\f1\b0  object using its 
\f2\b contentsOf
\f1\b0  method. This returns the content from a 
\f2\b URL
\f1\b0 , but it might throw an error (i.e., if the internet connection was down) so we need to use 
\f2\b try?
\f1\b0 .\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If the 
\f2\b Data
\f1\b0  object was created successfully, we reach the \'93we're OK to parse!\'94 line. This starts with 
\f2\b //
\f1\b0 , which begins a comment line in Swift. Comment lines are ignored by the compiler; we write them as notes to ourselves.\
\pard\pardeftab720\partightenfactor0
\cf2 This code isn't perfect, in fact far from it. In fact, by downloading data from the internet in 
\f2\b viewDidLoad()
\f1\b0  our app will lock up until all the data has been transferred. There are solutions to this, but to avoid complexity they won't be covered until project 9.\
\
For now, we want to focus on our JSON parsing. We already have a 
\f2\b petitions
\f1\b0  array that is ready to accept an array of petitions. We want to use Swift\'92s 
\f2\b Codable
\f1\b0  system to parse our JSON into that array, and once that's done tell our table view to reload itself.\
Are you ready? Because this code is remarkably simple given how much work it's doing:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 func
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 parse\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (json: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Data\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ) \{\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  decoder = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 JSONDecoder\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
\
    
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 if
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  jsonPetitions = 
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 try
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ? decoder.\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 decode\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Petitions\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .
\f2\b \cf6 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 self
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , from: json) \{\
        petitions = jsonPetitions.results\
        tableView.\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 reloadData\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 Place that method just underneath 
\f2\b viewDidLoad()
\f1\b0  method, then replace the existing 
\f2\b // we're OK to parse!
\f1\b0  line in 
\f2\b viewDidLoad()
\f1\b0  with this:\cf3 \
\pard\pardeftab720\partightenfactor0

\f3\fs36 \cf11 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 parse\cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (json: data)\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 This new 
\f2\b parse()
\f1\b0  method does a few new and interesting things:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
It creates an instance of 
\f2\b JSONDecoder
\f1\b0 , which is dedicated to converting between JSON and 
\f2\b Codable
\f1\b0  objects.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
It then calls the 
\f2\b decode()
\f1\b0  method on that decoder, asking it to convert our 
\f2\b json
\f1\b0  data into a 
\f2\b Petitions
\f1\b0  object. This is a throwing call, so we use 
\f2\b try?
\f1\b0  to check whether it worked.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
If the JSON was converted successfully, assign the 
\f2\b results
\f1\b0  array to our 
\f2\b petitions
\f1\b0  property then reload the table view.\
\pard\pardeftab720\partightenfactor0
\cf2 The one part you haven\'92t seen before is 
\f2\b Petitions.self
\f1\b0 , which is Swift\'92s way of referring to the 
\f2\b Petitions
\f1\b0  type itself rather than an instance of it. That is, we\'92re not saying \'93create a new one\'94, but instead specifying it as a parameter to the decoding so 
\f2\b JSONDecoder
\f1\b0  knows what to convert the JSON too.\
You can run the program now, although it just shows \'93Title goes here\'94 and \'93Subtitle goes here\'94 again and again, because our 
\f2\b cellForRowAt
\f1\b0  method just inserts dummy data.\
\
We want to modify this so that the cells print out the 
\f2\b title
\f1\b0  value of our 
\f2\b Petition
\f1\b0  object, but we also want to use the subtitle text label that got added when we changed the cell type from "Basic" to "Subtitle" in the storyboard. To do that, change the 
\f2\b cellForRowAt
\f1\b0  method to this\cf3 :\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf6 \cb7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  petition = petitions[indexPath.row]\
cell.textLabel?.text = petition.title\
cell.detailTextLabel?.text = petition.body\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 Our custom 
\f2\b Petition
\f1\b0  type has properties for 
\f2\b title
\f1\b0 , 
\f2\b body
\f1\b0  and 
\f2\b signatureCount
\f1\b0 , so now we can read them out to configure our cell correctly.\
If you run the app now, you'll see things are starting to come together quite nicely \'96 every table row now shows the petition title, and beneath it shows the first few words of the petition's body. The subtitle automatically shows "\'85" at the end when there isn't enough room for all the text, but it's enough to give the user a flavor of what's going on.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Tip:
\f1\b0  If you don\'92t see any data, make sure you named all the properties in the 
\f2\b Petition
\f1\b0  struct correctly \'96 the 
\f2\b Codable
\f1\b0  protocol matches those names against the JSON directly, so if you have a typo in \'93signatureCount\'94 then it will fail.}
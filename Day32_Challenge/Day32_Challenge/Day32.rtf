{\rtf1\ansi\ansicpg1251\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red212\green212\blue212;
\red252\green55\blue54;\red222\green43\blue91;\red235\green0\blue121;\red24\green24\blue28;\red246\green246\blue239;
\red215\green165\blue255;\red72\green212\blue251;\red248\green60\blue79;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c86275\c86275\c86275;
\cssrgb\c100000\c31373\c27059;\cssrgb\c90588\c27059\c43137;\cssrgb\c94902\c14118\c54902;\cssrgb\c12549\c12549\c14510;\cssrgb\c97255\c97255\c94902;
\cssrgb\c87843\c72157\c100000;\cssrgb\c32941\c86275\c98824;\cssrgb\c98824\c33725\c38039;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc\partightenfactor0

\f0\b\fs98 \cf2 \expnd0\expndtw0\kerning0
DAY 32\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 Milestone: Projects 4-6\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf2 It\'92s time for another consolidation day, because we\'92ve covered a lot of ground in the first three topics and it\'92s important you review them if you want them to stick in your head.\
I know I\'92ve said it before, but I just want to re-iterate the importance of going over what you learned. Chris Bosh, an NBA All-Star basketball player, said \'93every athlete knows that you get good by practicing, by repeating the same moves until you achieve your goal\'94 \'96\'a0apparently when he was in high school he wouldn\'92t leave practice until he scored ten free throws in a row.\
The value of repetition is that it forces you to go back to something and look at it with fresh eyes \'96\'a0to decide for yourself whether you really understand it, while also transferring short-term knowledge into long-term muscle memory. You\'92re retraining your brain so you know to instinctively reach for a table view controller or an alert controller to solve specific problems you face in the future.\
You\'92ll also be creating another complete app from scratch today. Once again this is about giving you free rein to solve problems however you see fit, to help you combat blank page paralysis.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Today you have three topics to work through, one of which of is your challenge.
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/guide/3/1/what-you-learned"}}{\fldrslt \expnd0\expndtw0\kerning0
What you learned}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/guide/3/2/key-points"}}{\fldrslt \expnd0\expndtw0\kerning0
Key points}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/guide/3/3/challenge"}}{\fldrslt \expnd0\expndtw0\kerning0
Challenge}}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Note:
\f1\b0  Don\'92t worry if you don\'92t complete challenges in the day they were assigned \'96\'a0in future days you\'92ll find you have some time to spare here and there, so challenges are something you can return back to in the future.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf2 What you learned\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 Project 4 showed how easy it is to build complex apps: Apple\'92s WebKit framework contains a complete web browser you can embed into any app that needs HTML to be displayed. That might be a small snippet you\'92ve generated yourself, or it might be a complete website as seen in project 4.\
After that, project 5 showed you how to build your second game, while also sneaking in a little more practice with 
\f2\b UITableViewController
\f1\b0 . Starting from project 11 we\'92ll be switching to SpriteKit for games, but there are lots of games you can make in UIKit too.\
WebKit is the second external framework we\'92ve used, after the Social framework in project 3. These frameworks always deliver lots of complex functionality grouped together for one purpose, but you also learned lots of other things too:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Delegation. We used this in project 4 so that WebKit events get sent to our 
\f2\b ViewController
\f1\b0  class so that we can act on them.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
We used 
\f2\b UIAlertController
\f1\b0  with its 
\f2\b .actionSheet
\f1\b0  style to present the user with options to choose from. We gave it a 
\f2\b .cancel
\f1\b0  button without a handler, which dismisses the options.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You saw you can place 
\f2\b UIBarButtonItems
\f1\b0  into the 
\f2\b toolbarItems
\f1\b0  property, then have a 
\f2\b UIToolbar
\f1\b0  shown by the navigation controller. We also used the 
\f2\b .flexibleSpace
\f1\b0  button type to make the layout look better.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You met Key-Value Observing, or KVO, which we used to update the loading progress in our web browser. This lets you monitor any property in all of iOS and be notified when it changes.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You learned how to load text files from disk using 
\f2\b contentsOf
\f1\b0 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
We added a text field to 
\f2\b UIAlertController
\f1\b0  for the first time, then read it back using 
\f2\b ac?.textFields?[0]
\f1\b0 . We\'92ll be doing this in several other projects in this series.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You dipped your toes into the world of closures once again. These are complicated beasts when you\'92re learning, but at this point in your Swift career just think of them as functions you can pass around in variables or as parameters to other functions.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You worked with some methods for string and array manipulation: 
\f2\b contains()
\f1\b0 , 
\f2\b remove(at:)
\f1\b0 , 
\f2\b firstIndex(of:)
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf2 On top of that, we also took a deep-dive into the world of Auto Layout. We used this briefly in projects 1 and 2, but you\'92ve now learned more ways to organize your designs: Visual Format Language and anchors. There are other ways yet to come, and soon you\'92ll start to find you prefer one method over another \'96 and that\'92s OK. I\'92m showing you them all so you can find what works best for you, and we all have our own preferences!\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \ul \ulc5 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf2 \ulnone Key points\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 There are three pieces of code I\'92d like to revisit because they carry special significance.\
First, let\'92s consider the 
\f2\b WKWebView
\f1\b0  from project 4. We added this property to the view controller:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  webView: \cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 WKWebView\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 !\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 Then added this new 
\f2\b loadView()
\f1\b0  method:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 override
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 func
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 loadView\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 () \{\
    webView = \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 WKWebView\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ()\
    webView.navigationDelegate = 
\f2\b \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 self
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
    view = webView\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 The 
\f2\b loadView()
\f1\b0  method is often not needed, because most view layouts are loaded from a storyboard. However, it\'92s common to write part or all of your user interface in code, and for those times you\'92re likely to want to replace 
\f2\b loadView()
\f1\b0  with your own implementation.\
If you wanted a more complex layout \'96 perhaps if you wanted the web view to occupy only part of the screen \'96 then this approach wouldn\'92t have worked. Instead, you would need to load the normal storyboard view then use 
\f2\b viewDidLoad()
\f1\b0  to place the web view where you wanted it.\
As well as overriding the 
\f2\b loadView()
\f1\b0  method, project 4 also had a 
\f2\b webView
\f1\b0  property. This was important, because as far as Swift is concerned the regular 
\f2\b view
\f1\b0  property is just a 
\f2\b UIView
\f1\b0 .\
Yes, 
\f4\i we
\f1\i0  know it\'92s actually a 
\f2\b WKWebView
\f1\b0 , but Swift doesn\'92t. So, when you want to call any methods on it like reload the page, Swift won\'92t let you say 
\f2\b view.reload()
\f1\b0  because as far as it\'92s concerned 
\f2\b UIView
\f1\b0  doesn\'92t have a 
\f2\b reload()
\f1\b0  method.\
That\'92s what the property solves: it\'92s like a permanent typecast for the 
\f2\b view
\f1\b0 , so that whenever we need to manipulate the web view we can use that property and Swift will let us.\
\
The second interesting piece of code is this, taken from project 5:\
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 if
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f2\b \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  startWords = 
\f2\b \cf7 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 try
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ? \cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 String\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (contentsOf: startWordsURL) \{\
    allWords = startWords.\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 components\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (separatedBy: \cf12 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "\\n"\cf9 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 This combines 
\f2\b if let
\f1\b0  and 
\f2\b try?
\f1\b0  in the same expression, which is something you\'92ll come across a lot. The 
\f2\b contentsOf
\f1\b0  initializer for strings lets you load some text from disk. If it succeeds you\'92ll get the text back, but if it fails Swift will complain loudly by throwing an exception.\
You learned about 
\f2\b try
\f1\b0 , 
\f2\b try!
\f1\b0 , and 
\f2\b try?
\f1\b0  some time ago, but I hope now you can see why it\'92s helpful to have all three around. What 
\f2\b try?
\f1\b0  does is say, \'93instead of throwing an exception, just return nil if the operation failed.\'94 And so, rather than 
\f2\b contentsOf
\f1\b0  returning a 
\f2\b String
\f1\b0  it will actually return a 
\f2\b String?
\f1\b0  \'96 it might be some text, or it might be nil. That\'92s where 
\f2\b if let
\f1\b0  comes in: it checks the return value from 
\f2\b contentsOf
\f1\b0  and, if it finds valid text, executes the code inside the braces.\
\
The last piece of code I\'92d like to review is this:\
\pard\pardeftab720\partightenfactor0

\f3\fs36 \cf9 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 view.\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 addConstraints\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf10 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 NSLayoutConstraint\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 .\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 constraints\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (withVisualFormat:\cf12 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "V:|[label1(labelHeight)]-[label2(labelHeight)]-[label3(labelHeight)]-[label4(labelHeight)]-[label5(labelHeight)]->=10-|"\cf9 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , options: [], metrics: metrics, views: viewsDictionary))\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 I think that \'96 in just one line of code \'96\'a0demonstrates the advantages of using Visual Format Language: it lines up five labels, one above the other, each with equal height, with a small amount of space between them, and 10 or more points of space at the end.\
That line also demonstrates the disadvantage of Visual Format Language: it has a tendency to look like line noise! You need to read it very carefully, sometimes jumping back and forward, in order to unpick what it\'92s trying to do. VFL is the quickest and easiest way to solve many Auto Layout problems in an expressive way, but as you progress through this course you\'92ll learn alternatives such as 
\f2\b UIStackView
\f1\b0  that can do the same thing without the complex syntax.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf2 Challenge\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 It\'92s time to put your skills to the test by making your own complete app from scratch. This time your job is to create an app that lets people create a shopping list by adding items to a table view.\
The best way to tackle this app is to think about how you build project 5: it was a table view that showed items from an array, and we used a 
\f2\b UIAlertController
\f1\b0  with a text field to let users enter free text that got appended to the array. That forms the foundation of this app, except this time you don\'92t need to validate items that get added \'96 if users enter some text, assume it\'92s a real product and add it to their list.\
For bonus points, add a left bar button item that clears the shopping list \'96\'a0what method should be used afterwards to make the table view reload all its data?\
Here are some hints in case you hit problems:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Remember to change 
\f2\b ViewController
\f1\b0  to build on 
\f2\b UITableViewController
\f1\b0 , then change the storyboard to match.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Create a 
\f2\b shoppingList
\f1\b0  property of type 
\f2\b [String]
\f1\b0  to hold all the items the user wants to buy.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Create your 
\f2\b UIAlertController
\f1\b0  with the style 
\f2\b .alert
\f1\b0 , then call 
\f2\b addTextField()
\f1\b0  to let the user enter text.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
When you have a new shopping list item, make sure you 
\f2\b insert()
\f1\b0  it into your 
\f2\b shoppingList
\f1\b0  array before you call the 
\f2\b insertRows(at:)
\f1\b0  method of your table view \'96 your app will crash if you do this the wrong way around.\
\pard\pardeftab720\partightenfactor0
\cf2 You might be tempted to try to use 
\f2\b UIActivityViewController
\f1\b0  to share the finished shopping list by email, but if you do that you\'92ll hit a problem: you have an array of strings, not a single string.\
There\'92s a special method that can create one string from an array, by stitching each part together using a separator you provide. I\'92ll be going into it in project 8, but if you\'92re keen to try it now here\'92s some code to get you started:\cf4 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs36 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 let
\f3\b0 \cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  list = shoppingList.\cf11 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 joined\cf9 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (separator: \cf12 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "\\n"\cf9 \cb8 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 )\
\pard\pardeftab720\partightenfactor0

\f1\fs35\fsmilli17600 \cf2 \cb1 \shad0 That will create a new 
\f2\b list
\f1\b0  constant that is a regular string, with each shopping list item separated by \'93\\n\'94 \'96 that\'92s Swift\'92s way of representing a new line.\
}
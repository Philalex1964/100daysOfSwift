{\rtf1\ansi\ansicpg1251\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red212\green212\blue212;
\red252\green55\blue54;\red222\green43\blue91;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c86275\c86275\c86275;
\cssrgb\c100000\c31373\c27059;\cssrgb\c90588\c27059\c43137;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc\partightenfactor0

\f0\b\fs98 \cf2 \expnd0\expndtw0\kerning0
DAY 40\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 Project 9, part two\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs35\fsmilli17600 \cf2 There\'92s an old joke about multitasking:\
A programmer has a problem and thinks, \'93I can fix this using multitasking!\'94\
have Now problems! two they\
(Hey, I said it was 
\f2\i old
\f1\i0 , I didn\'92t say it was 
\f2\i funny
\f1\i0 !)\
The point is that when you start running multiple pieces of code at the same time, they can complete in any order \'96\'a0the \'93now they have two problems!\'94 punchline got mashed up.\
In fact, 
\f2\i race conditions
\f1\i0  are a whole category of bugs caused by one task completing before it was supposed to \'96\'a0they are particularly nasty to fix because sometimes work completes in the correct order and everything works great, which is why we call it a 
\f2\i race
\f1\i0 .\
Yesterday was a gentle introduction to multi-tasking using Grand Central Dispatch, but we\'92ll be coming back to it more in the future. In the meantime, make sure you test what you\'92ve learned so you can be sure it\'92s all sunk in.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Today you should work through the wrap up chapter for project 9, complete its review, then work through all three of its challenges.
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/read/9/6/wrap-up"}}{\fldrslt \expnd0\expndtw0\kerning0
Wrap up}}\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/review/hws/project-9-grand-central-dispatch"}}{\fldrslt \expnd0\expndtw0\kerning0
Review for Project 9: Grand Central Dispatch}}\expnd0\expndtw0\kerning0
\
\pard\tx560\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs98 \cf2 Wrap up
\f1\b0\fs35\fsmilli17600 \
\pard\pardeftab720\partightenfactor0
\cf2 Although I've tried to simplify things as much as possible, GCD still isn't easy. That said, it's much easier than the alternatives: GCD automatically handles thread creation and management, automatically balances based on available system resources, and automatically factors in Quality of Service to ensure your code runs as efficiently as possible. The alternative is doing all that yourself!\
There's a lot more we could cover (not least how to create your own queues!) but really you have more than enough to be going on with, and certainly more than enough to complete the rest of this series. We'll be using GCD again, so it might help to keep this reference close to hand!\
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 Review what you learned\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 Anyone can sit through a tutorial, but it takes actual work to remember what was taught. It\'92s my job to make sure you take as much from these tutorials as possible, so I\'92ve prepared a short review to help you check your learning.\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.hackingwithswift.com/review/hws/project-9-grand-central-dispatch"}}{\fldrslt \cf2 Click here to review what you learned in project 9}}.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 Challenge\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs35\fsmilli17600 \cf2 One of the best ways to learn is to write your own code as often as possible, so here are three ways you should try your new knowledge to make sure you fully understand what\'92s going on:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Modify project 1 so that loading the list of NSSL images from our bundle happens in the background. Make sure you call 
\f3\b reloadData()
\f1\b0  on the table view once loading has finished!\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Modify project 8 so that loading and parsing a level takes place in the background. Once you\'92re done, make sure you update the UI on the main thread!\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Modify project 7 so that your filtering code takes place in the background. This filtering code was added in one of the challenges for the project, so hopefully you didn\'92t skip it!}